package sr.core.hist;

import sr.core.component.Event;
import sr.core.component.Position;

/** 
 The base event for a history defined in terms of <em>displacements</em> from a particular event.

 <em>The delta-base will often exploit a symmetry.</em> 
*/
public class DeltaBase {

  /** 
   Factory method.
   @param baseEvent from which a history is generated by "deltas".
  */
  public static DeltaBase of(Event baseEvent) {
    return new DeltaBase(baseEvent);  
  }

  /** Factory method for the delta-base having given position, and <code>ct=0</code>. */
  public static DeltaBase of(Position position) {
    return new DeltaBase(Event.of(0.0, position));  
  }

  /** Factory method to derive a delta-base from an event on a history. */
  public static DeltaBase of(History history, double ct) {
    return new DeltaBase(history.event(ct));  
  }

  /** Factory method using (0,0,0,0) as the delta-base-event. */
  public static DeltaBase origin() {
    return new DeltaBase(Event.of(0.0, Position.of(0.0, 0.0, 0.0)));  
  }
  
  public Event baseEvent() {return baseEvent;} 
  
  @Override public String toString() {
    return baseEvent.toString();
  }
  
  protected DeltaBase(Event ΔbaseEvent) {
    this.baseEvent = ΔbaseEvent;
  }

  private Event baseEvent;
}
